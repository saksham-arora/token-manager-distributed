// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: token_management/token_pb.proto

package token_client_server_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenManagerClient is the client API for TokenManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenManagerClient interface {
	CreateNewToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Response, error)
	// rpc GetTokens (GetTokensParams) returns (TokenList) {}
	ReadToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*WriteResponse, error)
	WriteToken(ctx context.Context, in *WriteTokenMsg, opts ...grpc.CallOption) (*WriteResponse, error)
	DropToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Response, error)
}

type tokenManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenManagerClient(cc grpc.ClientConnInterface) TokenManagerClient {
	return &tokenManagerClient{cc}
}

func (c *tokenManagerClient) CreateNewToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/token_management.TokenManager/CreateNewToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagerClient) ReadToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/token_management.TokenManager/ReadToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagerClient) WriteToken(ctx context.Context, in *WriteTokenMsg, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/token_management.TokenManager/WriteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenManagerClient) DropToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/token_management.TokenManager/DropToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenManagerServer is the server API for TokenManager service.
// All implementations must embed UnimplementedTokenManagerServer
// for forward compatibility
type TokenManagerServer interface {
	CreateNewToken(context.Context, *Token) (*Response, error)
	// rpc GetTokens (GetTokensParams) returns (TokenList) {}
	ReadToken(context.Context, *Token) (*WriteResponse, error)
	WriteToken(context.Context, *WriteTokenMsg) (*WriteResponse, error)
	DropToken(context.Context, *Token) (*Response, error)
	mustEmbedUnimplementedTokenManagerServer()
}

// UnimplementedTokenManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTokenManagerServer struct {
}

func (UnimplementedTokenManagerServer) CreateNewToken(context.Context, *Token) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewToken not implemented")
}
func (UnimplementedTokenManagerServer) ReadToken(context.Context, *Token) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadToken not implemented")
}
func (UnimplementedTokenManagerServer) WriteToken(context.Context, *WriteTokenMsg) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToken not implemented")
}
func (UnimplementedTokenManagerServer) DropToken(context.Context, *Token) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropToken not implemented")
}
func (UnimplementedTokenManagerServer) mustEmbedUnimplementedTokenManagerServer() {}

// UnsafeTokenManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenManagerServer will
// result in compilation errors.
type UnsafeTokenManagerServer interface {
	mustEmbedUnimplementedTokenManagerServer()
}

func RegisterTokenManagerServer(s grpc.ServiceRegistrar, srv TokenManagerServer) {
	s.RegisterService(&TokenManager_ServiceDesc, srv)
}

func _TokenManager_CreateNewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).CreateNewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_management.TokenManager/CreateNewToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).CreateNewToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManager_ReadToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).ReadToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_management.TokenManager/ReadToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).ReadToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManager_WriteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteTokenMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).WriteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_management.TokenManager/WriteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).WriteToken(ctx, req.(*WriteTokenMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenManager_DropToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenManagerServer).DropToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token_management.TokenManager/DropToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenManagerServer).DropToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenManager_ServiceDesc is the grpc.ServiceDesc for TokenManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token_management.TokenManager",
	HandlerType: (*TokenManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewToken",
			Handler:    _TokenManager_CreateNewToken_Handler,
		},
		{
			MethodName: "ReadToken",
			Handler:    _TokenManager_ReadToken_Handler,
		},
		{
			MethodName: "WriteToken",
			Handler:    _TokenManager_WriteToken_Handler,
		},
		{
			MethodName: "DropToken",
			Handler:    _TokenManager_DropToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_management/token_pb.proto",
}
